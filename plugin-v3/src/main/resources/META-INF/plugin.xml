<idea-plugin>
    <name>Perforce IDEA Community Integration</name>
    <id>PerforceIC</id>
    <version>0.11.0</version>
    <!-- see http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/build_number_ranges.html -->
    <idea-version since-build="171"/>
    <category>VCS Integration</category>
    <change-notes><![CDATA[
    <ul>
      <li><em>0.11.0</em><ul
        <li></li>
      </ul></li>
      <li><em>0.10.17</em><ul>
        <li>Fix "null file spec in arguments" from diff view, which may also fix issues around the changelist mapping</li>
        <li>Upgrade p4java depedency to version 19.1</li>
      </ul></li>
    </ul>
    ]]></change-notes>
    <description><![CDATA[
      <p>
      <a href="https://github.com/groboclown/p4ic4idea">[ Github ]</a> | <a href="https://github.com/groboclown/p4ic4idea/issues?q=is%3Aopen+is%3Aissue+-label%3A0.9">[ Open Issues ]</a>
      </p>
      <p>
      Associate your IDEA project with Perforce ("p4") through the built-in version control.
      </p>
      <p>
      Limitations:
      </p>
      <ul style="margin-left:2em;">
        <li>Does not indicate to the user whether a file is
        synchronized to the head revision or not, or if the file is locked in Perforce.</li>
        <li>No resolving merge conflicts.</li>
        <li>Symlinks not properly supported.</li>
      </ul>
      <p>
      The plugin will keep your client's open changelists
      synchronized with the IDEA backed changelists, viewable
      under the "Changes" view.  If the changelists become
      out of sync, you can force the plugin to re-examine the
      mappings by pressing the refresh button in the changes view.
      </p>
      <p>
      Modifying a file, moving a file, copying a file, refactoring
      a file, and deleting a file will perform the correct Perforce
      operations, and put the changes into the currently selected
      IDEA changelist.  Per-file history allows for comparing
      against the depot versions, even against the inherited file
      history.
      </p>
      <p><strong>Getting Started</strong></p>
      <p>
      Once you install the plugin, you can associate a project directory
      with Perforce in the project settings (<b>File</b> - <b>Settings...</b>,
      then navigate to the <b>Version Control</b> panel).
      Click on the "edit" icon for the version control root directories to setup
      the server connection.
      </p>
      <p>
      For most people, the environment variables will be sufficient to use the
      same mechanism to connect to the Perforce server as what the
      command-line <code>p4</code> tool does.  However, you may need to
      explicitly set the property values, or use a file that contains the
      settings.
      </p>
      <p>
      For SSL, you will want to use a <code>P4PORT</code> setting that starts
      with <code>ssl://</code> (such as <code>ssl://perforce:1666</code>).  If
      you have the server registered in the authorized hosts, then make sure
      that `P4TRUST` setting points to that file; or you can add a SSL server
      fingerprint setting to explicitly state the expected SSL fingerprint.
      </p>
      <p>
      Full documentation on the configuration settings is on the
      <a href="https://github.com/groboclown/p4ic4idea">main project page</a>.
      </p>
      <p>
      Please visit the GitHub project
      <a href="https://github.com/groboclown/p4ic4idea/issues?q=is%3Aopen+is%3Aissue+-label%3A0.9">open issues</a>
      for a list of known issues, or for reporting new ones.
      </p>
    ]]></description>
    <depends>com.intellij.modules.vcs</depends>
    <vendor url="https://github.com/groboclown/p4ic4idea" email="groboclown@gmail.com">Groboclown</vendor>

    <!-- FIXME
    <resource-bundle>net.groboclown.p4plugin.P4Bundle</resource-bundle>
    -->

    <actions>
        <group id="P4ExtendedActions">
            <!-- FIXME re-add behavior
            <action id="P4.RevertUnchanged" class="net.groboclown.p4plugin.actions.P4RevertUnchanged"
                text="Revert unchanged"
                description="Revert files that are checked out but not different from the server version."
                />
            -->

            <!-- FIXME re-add behavior
            <action id="P4.Shelve" class="net.groboclown.p4plugin.actions.P4ShelveChangesAction"
                    description="Preserve work to the Perforce server without committing them"/>
            -->

            <action id="P4.CreateSwarmReview" class="net.groboclown.p4plugin.actions.CreateSwarmReviewAction"
                    text="Create Or Edit Swarm Review"
                    description="Send a review request from the selected changelist"/>

            <!-- Add the revert unchanged to the changelist menu -->
            <add-to-group group-id="ChangesViewPopupMenu"
                          anchor="after" relative-to-action="ChangesView.Edit"/>
        </group>

        <!-- Need to add to the welcome screen.
        To add ourself to the welcome screen ("checkout from project"), need to add an extension
        CheckoutProvider.EXTENSION_POINT_NAME
        -->


        <group id="P4FileActions">
            <reference ref="CheckinFiles"/>
            <action id="P4.Edit" class="net.groboclown.p4plugin.actions.P4EditAction"
                    text="Add or Edit" icon="AllIcons.Actions.Edit"
                    use-shortcut-of="ChangesView.AddUnversioned"/>
            <reference ref="ChangesView.Revert"/>
            <reference ref="UpdateFiles" />
            <!-- FIXME re-add behavior
            <reference ref="P4.RevertUnchanged"/>
            <reference ref="P4.Shelve"/>
            -->

            <separator/>
            <reference ref="Annotate"/>
            <reference ref="Show.Current.Revision"/>
            <reference ref="Compare.SameVersion"/>
            <reference ref="Compare.LastVersion"/>
            <reference ref="Compare.Selected"/>
            <!-- this uses the custom P4RevisionSelector, which has rendering problems.
            <reference ref="Compare.Specified"/>
            -->
            <reference ref="Vcs.ShowTabbedFileHistory"/>
            <reference ref="Vcs.ShowHistoryForBlock"/>
            <!--
            <separator/>
            <action id="P4.ResolveConflicts" class="net.groboclown.p4plugin.actions.P4ResolveConflictsAction"
                    text="Resolve Conflicts..."/>
            <separator/>
            -->
        </group>

        <group id="P4.Menu" class="net.groboclown.p4plugin.actions.P4Menu" popup="true" text="_P4">
            <reference ref="P4FileActions"/>

            <!--
            <separator/>
            <reference ref="P4RepositoryActions"/>
            -->

            <add-to-group group-id="VcsGlobalGroup" anchor="after" relative-to-action="Vcs.Specific"/>
        </group>

        <group id="P4.ContextMenu" class="net.groboclown.p4plugin.actions.P4Menu" popup="true" text="_P4">
            <reference ref="P4FileActions"/>

            <add-to-group group-id="VcsGroup" anchor="last"/>
        </group>
    </actions>

    <extensions defaultExtensionNs="com.intellij">
        <vcs name="p4ic" vcsClass="net.groboclown.p4plugin.extension.P4Vcs" displayName="Perforce"/>

        <!-- FIXME do we need this?
        <vcsPopupProvider implementation="net.groboclown.p4plugin.extension.P4QuickListContentProvider"/>
        -->

        <!-- User settings, independent of the connection configuration; per-project -->
        <projectService
                serviceInterface="net.groboclown.p4plugin.components.UserProjectPreferences"
                serviceImplementation="net.groboclown.p4plugin.components.UserProjectPreferences"/>

        <!-- Populate a project with the contents from Perforce -->
        <checkoutProvider implementation="net.groboclown.p4plugin.extension.P4CheckoutProvider"/>

        <changesViewContent tabName="Active Connections"
                className="net.groboclown.p4plugin.ui.connection.ActiveConnectionViewManager"
        />
        <!-- optionally add in predicateClassName -->

    </extensions>

    <project-components>

        <!-- The per-project, top-level server connection handler. -->
        <component>
            <implementation-class>net.groboclown.p4plugin.components.P4ServerComponent</implementation-class>
        </component>

        <!-- The project-level cache of server-side objects. -->
        <component>
            <implementation-class>net.groboclown.p4plugin.components.CacheComponent</implementation-class>
        </component>

        <component>
            <interface-class>net.groboclown.p4.server.api.ProjectConfigRegistry</interface-class>
            <implementation-class>net.groboclown.p4.server.impl.ProjectConfigRegistryImpl</implementation-class>
        </component>

        <component>
            <implementation-class>net.groboclown.p4plugin.ui.VcsDockedComponent</implementation-class>
        </component>

        <component>
            <interface-class>com.intellij.openapi.vcs.changes.ChangeListDecorator</interface-class>
            <implementation-class>net.groboclown.p4plugin.ui.P4ChangeListDecorator</implementation-class>
        </component>

        <component>
            <implementation-class>net.groboclown.p4plugin.components.UserErrorComponent</implementation-class>
        </component>

        <component>
            <implementation-class>net.groboclown.p4.server.impl.config.PersistentRootConfigComponent</implementation-class>
        </component>

        <component>
            <implementation-class>net.groboclown.p4plugin.components.CacheViewRefreshComponent</implementation-class>
        </component>

        <component>
            <implementation-class>net.groboclown.p4plugin.components.SwarmConnectionComponent</implementation-class>
        </component>

        <!-- FIXME re-add this
        <component>
            <implementation-class>net.groboclown.p4plugin.ui.pending.PendingChangesView</implementation-class>
        </component>
        -->
    </project-components>

    <module-components>
    </module-components>

    <application-components>
        <!-- Storage and retrieval of passwords -->
        <component>
            <interface-class>net.groboclown.p4.server.api.ApplicationPasswordRegistry</interface-class>
            <implementation-class>net.groboclown.p4plugin.components.ApplicationPasswordRegistryComponent</implementation-class>
        </component>

        <!-- Manages password issues -->
        <component>
            <implementation-class>net.groboclown.p4plugin.components.InvalidPasswordMonitorComponent</implementation-class>
        </component>
    </application-components>
</idea-plugin>
