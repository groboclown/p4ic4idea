plugins {
    id 'java-library'
    id 'p4ic.compat'
}

ideaImplementation.uses(
        'openapi',
        'core-api',
        'annotations-common',
        'annotations',
        'vcs-api-core',
        'vcs-api',
        'platform-api',
        'util',
        'util-rt',
        'editor-ui-api',
        'extensions',
        'jdom',
        'forms_rt',
        'jgoodies-forms',
        'projectModel-api',

        // Look at getting rid of the "impl" dependencies
        'platform-impl',
        'vcs-impl',
        'core-impl'
)

ideaTest.uses(
        'testFramework',
        'java-psi-impl',
        'java-runtime',
        'lang-api',
        'lang-impl',
        'trove4j',
        'log4j',
        'picocontainer',
        'boot',
        'bootstrap',
)

configurations {
    zip
}

repositories {
    ivy {
        url "$rootDir/lib"
        layout "pattern", {
            artifact "main/[artifact]-[revision].[ext]"
            artifact "test/[artifact]-[revision].[ext]"
        }
    }
}


dependencies {
    //compatApi ()

    compatImplementation (
            project(':idea-compat:compat-api'),
            project(':p4java'),
            project(':swarm')
    )
    runtime (
            project(':idea-compat:v171')
    )
    compatTest(
            'junit:junit:4.12',
            'org.hamcrest:hamcrest-core:1.3',
            'org.mockito:mockito-core:2.0.86-beta',
            project(':p4d-test-core')
    )

    // Need to be really careful here.  This must only be
    // non-IDE jars required by the plugin and its dependent
    // libraries.
    zip (
            // swarm dependencies
            project(':swarm'),
            files(
                    tasks.getByPath(':idea-compat:compat-api:jar').archivePath,
                    tasks.getByPath(':p4java:jar').archivePath,
                    tasks.getByPath(':idea-compat:v171:jar').archivePath,
                    tasks.getByPath(':swarm:jar').archivePath
            )
    )
}


task packageVersion {
    dependsOn processResources
    inputs.file("src/main/resources/META-INF/plugin.xml")
    outputs.file("$buildDir/resources/main/p4ic-version.txt")
    outputs.file("$buildDir/resources/main/META-INF/plugin.xml")

    doFirst {
        def pluginFile = file("src/main/resources/META-INF/plugin.xml")
        def pluginXml = new XmlSlurper().parse(pluginFile)
        // logger.lifecycle("Plugin file: id [" + pluginXml.name + ']')
        def version = pluginXml.version
        file("$buildDir/resources/main/p4ic-version.txt").text = version

        copy {
            from pluginFile
            into "$buildDir/resources/main/META-INF"
        }
    }
}
jar.dependsOn packageVersion


task assembleZip(type: Zip) {
    dependsOn ':p4java:jar'
    dependsOn ':idea-compat:compat-api:jar'
    dependsOn ':idea-compat:v171:jar'
    dependsOn ':swarm:jar'
    dependsOn 'jar'

    doFirst {
        copy {
            // For some reason, the jar file just isn't added in, even when
            // explicitly listed by name, or copied to another place.  It
            // has to be renamed to something different.
            // However, we do need to explicitly name the jar after the name of the
            // plugin.  I think.
            // Is it in some default exclude?
            from file(jar.archivePath)
            into "$buildDir/tmp"
            rename '.*', 'p4ic4idea.jar'
        }
    }

    into('lib') {
        from configurations.zip.resolvedConfiguration.files
    }

    into('lib') {
        // For some reason, the jar file just isn't added in.
        //from file(jar.archivePath)
        from file("$buildDir/tmp/p4ic4idea.jar")
    }

    into("/") {
        from "../README.md"
        from "../LICENSE"
        from "../CHANGES.md"
    }

    // All the licenses for the bundled jars...
    into("lib") {
        from "$rootDir/p4java/LICENSE-p4java.txt"
    }
    into("lib") {
        from configurations.zip.resolvedConfiguration.files.collect { cfile ->
            def libname = cfile.name
            def p = libname.lastIndexOf('-')
            def i = 0
            while (p >= 0) {
                libname = libname.substring(0, p)
                File license = file("$rootDir/lib/main/LICENSE-" + libname + '.txt')
                i++
                if (license.exists()) {
                    return license
                }
                p = libname.lastIndexOf('-')
            }
            return null
        }.findAll {
            it != null
        }
    }
}
assemble.dependsOn assembleZip

task finalizeZip {
    dependsOn assembleZip

    doLast {
        copy {
            from assembleZip.outputs.files
            into "$rootDir"
            rename '.*', 'p4ic4idea.zip'
        }
    }
}
assemble.dependsOn finalizeZip



group 'net.groboclown.p4ic4idea'
version '1.0'
